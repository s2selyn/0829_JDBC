package com.kh.statement.run;

import com.kh.statement.view.MemberView;

public class MemberRun {

	public static void main(String[] args) {
		
		MemberView mv = new MemberView();
		
		mv.mainMenu();
		
	}
	
// 10:40 정리
	// JDBC + MVC
	// 각자 클래스의 역할을 구분해서 JDBC와 함께 작업을 하고있음
	/*
	 * 자바를 가지고 만드는 프로그램이 있고, 데이터를 저장하기 위한 데이터베이스가 있음
	 * (Java Program, DB)
	 * 
	 * 실제 데이터 저장하는건 DB에 테이블이라는 형태를 만들어서(MEMBER 테이블)
	 * 작업은 자바 프로그램에서 하고있음(insert 등)
	 * 
	 * 프로그램 안에서도 영역을 나눠서 작업하고 있음
	 * 프로그램의 시작은 Run 클래스에서, 메인 메소드(main())를 포함하고 있음, 프로그램의 실행(메인화면 출력)만 담당함
	 * 
	 * 메인화면을 출력하고 싶어서 View라는 영역에서(뷰는 controller, scanner를 필드로 사용하고 있음)
	 * 뷰는 사용자가 프로그램을 이용할 수 있도록 UI(User Interface)를 출력하는 것을 담당하고 있음 + 사용자에게 필요한 값을 입력 받는 역할을 하고있음
	 * 사용자는 뷰를 본 다음에 자기가 하고 싶은 요청같은것들을 함(추가 조회 수정 탈퇴 등)
	 * 뷰에서 이것을 받아서 요청처리를 해주기 위해서 Controller에게 사용자의 요청, 사용자가 입력한 입력값들을 전달함
	 * 
	 * 컨트롤러는 뷰로부터 요청 및 입력값을 받아서
	 * 뷰로부터 전달받은 데이터 가공 + 요청처리를 진행
	 * 뷰가 요청하는 것은 컨트롤러가 스스로 처리할 수 있는 요청들이 아님
	 * 컨트롤러가 또 Model중에서도 DAO에게 요청을 전달
	 * 
	 * Model 안에 우리가 VO(불변값 담기), DTO(데이터 전송), DAO들을 만들어뒀음
	 * VO, DTO는 컨트롤러나 DAO가 데이터를 가공하기 위해 있고
	 * DAO는 DB와의 직접적인 연결관계를 가지고 있음
	 * DAO 입장에서는 직접 DB와 붙어서 사용자의 요청에 대한 요청처리를 진행해야함
	 * 이 때 필요한것이 JDBC(Java Database Connectivity)라는 인터페이스를 사용함(JDBC API)
	 * 사용법? 메소드를 알면 사용가능?
	 * JDBC 절차를 이용
	 * Driver등록
	 * Connection 생성
	 * Statement 생성
	 * SQL실행 및 결과처리
	 * 매핑 또는 트랜잭션처리
	 * 자원반납
	 * 결과반환
	 * 
	 * DAO에서는 내부에서 JDBC절차를 이용해서 DB와 이러쿵저러쿵
	 * JDBC 절차를 이용해서 만들어진 결과를 컨트롤러에게 반환
	 * 
	 * 컨트롤러는 다시 DAO로부터 반환받은 요청 처리 결과(반환값)를 뷰로 반환
	 * 
	 * 뷰는 컨트롤러로부터 돌려받은 데이터를 가지고 성공 실패 여부에 따라서 사용자에게 결과 출력
	 * 
	 * 뷰는 입/출력을 담당
	 * 모델은 데이터 담당
	 * 컨트롤러는 중간다리, 뷰와 모델 사이의 제어자 역할
	 * 
	 * 각자 역할을 가지고 잘 나눠서 돌리고 있음
	 * 이 파트까지 하고 나니까 비로소 우리가 프로그램 만들었다
	 * 사용자에게 무언가 값을 입력받고 요청처리를 해주고 결과를 반환해주고 값도 저장해주는 그런 프로그램을 만들었다
	 * 
	 */

}
